import { useEffect, useState } from 'react';
import { Progress } from '@/components/ui/progress';
import { getWaterRecommendation } from '@/services/healthData';
import { Droplet, Plus, Minus, Info, Clock } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@/components/ui/hover-card";
import { formatInTimeZone } from 'date-fns-tz';
import { toast } from '@/components/ui/use-toast';

interface WaterIntakeProgressProps {
  heartRate: number | null;
  bloodOxygen: number | null;
}

const getRecommendedIntakeByAge = (age: number, gender: string): { liters: number, glasses: number } => {
  if (age >= 1 && age <= 3) return { liters: 1.3, glasses: 5 };
  if (age >= 4 && age <= 8) return { liters: 1.7, glasses: 7 };
  if (age >= 9 && age <= 13) {
    return gender === "male" ? { liters: 2.4, glasses: 10 } : { liters: 2.1, glasses: 9 };
  }
  if (age >= 14 && age <= 18) {
    return gender === "male" ? { liters: 3.3, glasses: 13 } : { liters: 2.3, glasses: 9 };
  }
  if (age >= 19 && age <= 50) {
    return gender === "male" ? { liters: 3.7, glasses: 15 } : { liters: 2.7, glasses: 11 };
  }
  return { liters: 2.5, glasses: 10 }; // Default for 50+
};

const getAdviceByAge = (age: number): string => {
  if (age >= 1 && age <= 8) {
    return "Chia nh·ªè l∆∞·ª£ng n∆∞·ªõc u·ªëng trong ng√†y. Khuy·∫øn kh√≠ch u·ªëng n∆∞·ªõc th∆∞·ªùng xuy√™n v√† b·ªï sung qua tr√°i c√¢y.";
  }
  if (age >= 9 && age <= 18) {
    return "U·ªëng n∆∞·ªõc tr∆∞·ªõc, trong v√† sau khi v·∫≠n ƒë·ªông. H·∫°n ch·∫ø n∆∞·ªõc ng·ªçt, ∆∞u ti√™n n∆∞·ªõc l·ªçc.";
  }
  if (age >= 19 && age <= 50) {
    return "U·ªëng n∆∞·ªõc ƒë·ªÅu ƒë·∫∑n k·ªÉ c·∫£ khi kh√¥ng kh√°t. B·∫Øt ƒë·∫ßu ng√†y m·ªõi v·ªõi m·ªôt ly n∆∞·ªõc.";
  }
  return "Duy tr√¨ u·ªëng n∆∞·ªõc ƒë·ªÅu ƒë·∫∑n, u·ªëng t·ª´ng ng·ª•m nh·ªè n·∫øu c·∫ßn. B·ªï sung n∆∞·ªõc qua th·ª±c ph·∫©m m·ªÅm.";
};

const getTimeBasedRecommendation = (currentHour: number): string => {
  if (currentHour >= 6 && currentHour < 9) {
    return "Bu·ªïi s√°ng: U·ªëng 1-2 c·ªëc n∆∞·ªõc ngay khi th·ª©c d·∫≠y ƒë·ªÉ k√≠ch ho·∫°t c∆° th·ªÉ";
  } else if (currentHour >= 9 && currentHour < 12) {
    return "Gi·ªØa s√°ng: Duy tr√¨ u·ªëng n∆∞·ªõc ƒë·ªÅu ƒë·∫∑n, tr√°nh ƒë·ªÉ c∆° th·ªÉ kh√°t";
  } else if (currentHour >= 12 && currentHour < 14) {
    return "Bu·ªïi tr∆∞a: U·ªëng n∆∞·ªõc tr∆∞·ªõc v√† sau b·ªØa ƒÉn ƒë·ªÉ h·ªó tr·ª£ ti√™u h√≥a";
  } else if (currentHour >= 14 && currentHour < 17) {
    return "Bu·ªïi chi·ªÅu: B·ªï sung n∆∞·ªõc ƒë·ªÉ duy tr√¨ nƒÉng l∆∞·ª£ng l√†m vi·ªác";
  } else if (currentHour >= 17 && currentHour < 20) {
    return "Chi·ªÅu t·ªëi: U·ªëng n∆∞·ªõc sau khi t·∫≠p th·ªÉ d·ª•c ho·∫∑c v·∫≠n ƒë·ªông";
  } else {
    return "Bu·ªïi t·ªëi: U·ªëng v·ª´a ƒë·ªß, tr√°nh u·ªëng qu√° nhi·ªÅu tr∆∞·ªõc khi ƒëi ng·ªß";
  }
};

export const WaterIntakeProgress = ({ heartRate, bloodOxygen }: WaterIntakeProgressProps) => {
  const [recommendation, setRecommendation] = useState('');
  const [currentGlasses, setCurrentGlasses] = useState(0);
  const [targetGlasses, setTargetGlasses] = useState(8);
  const [progress, setProgress] = useState(0);
  const [userProfile, setUserProfile] = useState<any>(null);
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000); // Update every minute

    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    const savedProfile = localStorage.getItem('userProfile');
    if (savedProfile) {
      const profile = JSON.parse(savedProfile);
      setUserProfile(profile);
      const recommended = getRecommendedIntakeByAge(profile.age || 25, profile.gender || "male");
      setTargetGlasses(recommended.glasses);
    }
  }, []);

  useEffect(() => {
    const fetchRecommendation = async () => {
      if (heartRate && bloodOxygen) {
        const result = await getWaterRecommendation(heartRate, bloodOxygen);
        setRecommendation(result.recommendation);
        if (userProfile?.age) {
          const recommended = getRecommendedIntakeByAge(userProfile.age, userProfile.gender || "male");
          setTargetGlasses(Math.max(recommended.glasses, result.glassesCount));
        } else {
          setTargetGlasses(Math.max(8, result.glassesCount));
        }
      }
    };

    fetchRecommendation();
  }, [heartRate, bloodOxygen, userProfile]);

  useEffect(() => {
    setProgress(Math.min(100, (currentGlasses / targetGlasses) * 100));
  }, [currentGlasses, targetGlasses]);

  const addGlass = () => {
    const newValue = currentGlasses + 1;
    setCurrentGlasses(Math.min(newValue, targetGlasses));
    if (newValue >= targetGlasses) {
      toast({
        title: "Ch√∫c m·ª´ng! üéâ",
        description: "B·∫°n ƒë√£ ƒë·∫°t m·ª•c ti√™u u·ªëng n∆∞·ªõc trong ng√†y!",
      });
    }
  };

  const removeGlass = () => {
    setCurrentGlasses(prev => Math.max(0, prev - 1));
  };

  const currentHour = currentTime.getHours();
  const timeRecommendation = getTimeBasedRecommendation(currentHour);
  const currentTimeString = formatInTimeZone(currentTime, 'Asia/Ho_Chi_Minh', 'HH:mm');

  return (
    <div className="p-6 bg-white rounded-2xl shadow-sm space-y-4">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <Droplet className="text-blue-500" />
          <h3 className="font-semibold">L∆∞·ª£ng n∆∞·ªõc u·ªëng trong ng√†y</h3>
        </div>
        <div className="flex items-center gap-2">
          <Clock className="h-4 w-4 text-gray-500" />
          <span className="text-sm text-gray-500">{currentTimeString}</span>
        </div>
      </div>
      
      <Progress value={progress} className="h-4" />
      
      <div className="flex justify-between text-sm text-gray-600">
        <span>{currentGlasses} / {targetGlasses} c·ªëc</span>
        <span>{Math.round(progress)}%</span>
      </div>

      <div className="flex gap-4 justify-center">
        <Button 
          variant="outline" 
          size="icon"
          onClick={removeGlass}
          disabled={currentGlasses === 0}
        >
          <Minus className="h-4 w-4" />
        </Button>
        <Button 
          variant="outline" 
          size="icon"
          onClick={addGlass}
          disabled={currentGlasses === targetGlasses}
        >
          <Plus className="h-4 w-4" />
        </Button>
      </div>

      <div className="bg-blue-50 p-3 rounded-lg space-y-2">
        <p className="text-sm text-blue-600">
          <Clock className="h-4 w-4 inline mr-2" />
          {timeRecommendation}
        </p>
        {recommendation && (
          <p className="text-sm text-blue-600">
            üíß {recommendation}
          </p>
        )}
      </div>

      <HoverCard>
        <HoverCardTrigger asChild>
          <Button variant="ghost" size="sm" className="w-full">
            <Info className="h-4 w-4 mr-2" />
            Xem g·ª£i √Ω theo ƒë·ªô tu·ªïi
          </Button>
        </HoverCardTrigger>
        <HoverCardContent className="w-80">
          <div className="space-y-2">
            <h4 className="font-semibold">L·ªùi khuy√™n cho b·∫°n</h4>
            <p className="text-sm text-muted-foreground">
              {userProfile?.age ? getAdviceByAge(userProfile.age) : "H√£y c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n ƒë·ªÉ nh·∫≠n g·ª£i √Ω ph√π h·ª£p h∆°n."}
            </p>
            {userProfile?.age && userProfile?.gender && (
              <p className="text-sm text-muted-foreground mt-2">
                Theo ƒë·ªô tu·ªïi v√† gi·ªõi t√≠nh c·ªßa b·∫°n, b·∫°n n√™n u·ªëng kho·∫£ng {getRecommendedIntakeByAge(userProfile.age, userProfile.gender).liters} l√≠t n∆∞·ªõc m·ªói ng√†y.
              </p>
            )}
          </div>
        </HoverCardContent>
      </HoverCard>
    </div>
  );
};